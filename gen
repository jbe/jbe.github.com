#!/usr/bin/env ruby

require 'yaml'
require 'ostruct'
require 'redcarpet'
require 'slim'
require 'sass'
require 'tilt'

class Uniblog
  class Renderer < Redcarpet::Render::HTML
    include Redcarpet::Render::SmartyPants
  end

  MD = Redcarpet::Markdown.new(
    Renderer.new(with_toc_data: true),
    no_intra_emphasis:   true,
    tables:              true,
    strikethrough:       true,
    lax_spacing:         true,
    space_after_headers: true,
    highlight:           true,
    footnotes:           true
  )

  class Database
    def initialize
      @by_type    = {}
      @by_tag     = {}
      @by_mark    = {}
      @by_year    = {}
      @by_month   = {}
      @by_day     = {}
      @by_id      = {}
    end

    attr_reader *%i(by_type by_tag by mark
                    by_year by_month by_day by_id)

    def index(item)
      @by_id[item.id] = item

      (@by_type[ item.class]             ||= []) << item
      (@by_year[ item.date.year]         ||= []) << item
      (@by_month[item.date.index_month]  ||= []) << item
      (@by_day[  item.date.index_day]    ||= []) << item

      item.tags.each  { |tag|  (@by_tag[tag]   ||= []) << item }
      item.marks.each { |mark| (@by_mark[mark] ||= []) << item }
    end
  end

  class Post
    def initialize(date, db, *args)
      @db       = db
      @date     = date
      @id       = date.make_id
      raw_tags  = args.select {|a| a.match /^\[.+\]$/ }
      raw_marks = args.select {|a| a.match /^\{.+\}$/ }
      args      = (args - raw_tags) - raw_marks
      @tags     = raw_tags.map  {|t| t[1..-2].to_sym }
      @marks    = raw_marks.map {|m| m[1..-2].gsub('-', '_').to_sym }
      @md_cache = []
      if mark?(:no_title)
        @md_cache << args.join(' ')
      else
        @title_md = args.join(' ')       if args.any?
        @title    = title_md #MD.render(@title_md) if args.any?
      end
    end

    attr_reader *%i(date id tags marks title title_md html md)
    alias :title? :title

    def parse_content(str, location)
      @md_cache << str
    end

    def mark?(name)
      marks.include?(name)
    end

    def done!
      @md   = @md_cache.join
      @html = MD.render(@md)
      @db.index self
      puts 'Empty post found.' if @title.nil? && @md_cache.empty?
    end
  end

  class DateStamp
    @@cache = {}

    def self.new(*args)
      @@cache[args] ||= super
    end

    def initialize(year, month, day)
      raise "invalid year: #{year.inspect}"  unless year.length == 4
      raise "invalid month: #{year.inspect}" unless month.length == 2
      raise "invalid day: #{day.inspect}"    unless day.length == 2
      @year         = year
      @month        = month
      @day          = day
      @index_month  = "#{@year}-#{@month}"
      @index_day    = "#{@index_month}-#{@day}"
      @member_count = 0
    end

    attr_reader *%i(year month day members index_month index_day)

    def make_id
      "#{@index_day}-%03d" % [@member_count += 1]
    end
  end

  class StatefulParser
    def initialize(base)
      @data_files  = Dir[File.join(base, 'data', '**')]
      @db          = Database.new
      @data_files.each do |path|
        i = 0
        File.foreach(path) do |line|
          parse_line line, "#{path}:#{i += 1}"
        end
        @current.done! if @current
      end
    end

    attr_reader :db

    def parse_line(str, loc)
      if str.start_with?('>>> ')
        parse_command str[4..-1]
      elsif str.start_with?('@@@ ')
        str = "<a href='#{str[4..-1]}'><img src='#{str[4..-1]}'></a>"
        @current.parse_content(str, loc) unless @current.nil?
      else @current.parse_content(str, loc) unless @current.nil?
      end
    end

    def parse_command(string)
      args = string.split(/\s+/)
      if args.length == 3 && args[0].match(/[0-9]{4}/) &&
        args[1..2].all? {|a| a.match(/[0-9]{2}/) }
          @date = DateStamp.new(*args)
      else
        @current.done! if @current
        @current = Post.new(@date, @db, *args)
      end
    end
  end

  def initialize(path='.')
    @state    = StatefulParser.new(path)
    @db       = @state.db
    @settings = OpenStruct.new(YAML.load_file(
                               File.join(path, 'settings.yml')))
  end

  attr_reader :db

  def render!
    styles = Tilt.new('themes/mono.sass').render
    js     = Tilt.new('themes/mono.coffee').render
    html   = Tilt.new('themes/mono.slim').render(@db,
      stylesheet: styles, js: js, settings: @settings)
    File.write 'index.html', html
  end
end

b = Uniblog.new(*ARGV)
b.render!


